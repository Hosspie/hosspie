name: Copy Parent Milestone to Sub-issue

on:
  issues:
    types: [opened] # 이슈가 열릴 때 실행

jobs:
  copy-milestone:
    runs-on: ubuntu-latest
    permissions:
      issues: write # 이슈를 업데이트하기 위한 권한
      contents: read # 기본적으로 필요한 권한

    steps:
      - name: Get current issue information
        id: current_issue_info
        uses: actions/github-script@v7
        with:
          script: |
            // 현재 이슈 정보를 가져옵니다.
            const issue = context.payload.issue;
            console.log(`Current issue number: ${issue.number}`);
            console.log(`Current issue body: ${issue.body.substring(0, 100)}...`); // body 내용 일부 출력

            // 부모 이슈 번호를 찾기 위해 linked issues 또는 body를 확인합니다.
            // GitHub UI에서 'Parent issue'로 연결된 경우 'timeline' 이벤트를 통해 파싱하는 것이 더 견고합니다.
            // 여기서는 GitHub REST API의 'get a timeline for an issue'를 사용하여 'added_as_releated' 이벤트를 찾습니다.
            // 또는 간단히 description에 #parent_issue_number 가 있으면 파싱합니다.
            // 하지만 GitHub의 'Parent Issue' 기능 자체는 일반적인 이슈 본문 파싱으로는 직접 접근하기 어렵습니다.
            // 따라서, GitHub API의 타임라인 이벤트를 통해 부모 이슈를 찾는 것이 가장 신뢰성 있는 방법입니다.

            // 일단, 기존처럼 body에서 #숫자를 찾아보는 로직을 유지하면서,
            // 더 나아가 타임라인 이벤트를 통해 부모 이슈를 명시적으로 찾는 로직을 추가합니다.

            let parentIssueNumber = null;

            // 1. 이슈 본문에서 #숫자 형태를 먼저 확인 (하위 호환성 및 수동 입력 케이스 대비)
            const bodyMatch = issue.body.match(/#([0-9]+)/);
            if (bodyMatch) {
              parentIssueNumber = parseInt(bodyMatch[1], 10);
              console.log(`Found parent issue number ${parentIssueNumber} from issue body.`);
            }

            // 2. 이슈 타임라인 이벤트를 통해 'added_as_related' 이벤트 확인
            // 이 방법은 GitHub의 Parent/Child Issue 링크에 더 직접적으로 대응합니다.
            if (!parentIssueNumber) {
              try {
                const timeline = await github.rest.issues.listEventsForTimeline({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number
                });

                const parentEvent = timeline.data.find(event => 
                  event.event === 'added_as_related' && event.source && event.source.issue && event.source.issue.id !== issue.id
                );

                if (parentEvent && parentEvent.source.issue.number) {
                  parentIssueNumber = parentEvent.source.issue.number;
                  console.log(`Found parent issue number ${parentIssueNumber} from timeline event 'added_as_related'.`);
                }
              } catch (error) {
                console.warn(`Could not fetch timeline events to find parent issue: ${error.message}`);
              }
            }
            
            console.log(`Final parent issue number detected: ${parentIssueNumber}`);
            console.log(`parent_number=${parentIssueNumber}`) >> "$GITHUB_OUTPUT";
            return { parent_number: parentIssueNumber }; # 여기서 GITHUB_OUTPUT으로 바로 쓰는게 아니라 return 값으로 넘기도록 수정
          result-encoding: json # 스크립트 결과물을 JSON으로 인코딩하여 출력

      - name: Check if parent issue number was found
        if: steps.current_issue_info.outputs.parent_number == 'null' || steps.current_issue_info.outputs.parent_number == ''
        run: |
          echo "No valid parent issue number found. Skipping milestone copy."
          exit 0 # 부모 이슈 번호가 없으면 여기서 종료

      - name: Get parent issue info (milestone)
        id: parent_info
        uses: actions/github-script@v7
        with:
          script: |
            const parentIssueNumber = parseInt(`${{ steps.current_issue_info.outputs.parent_number }}`, 10);
            console.log(`Fetching info for parent issue: ${parentIssueNumber}`);

            try {
              const parent = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: parentIssueNumber
              });

              const milestoneNumber = parent.data.milestone ? parent.data.milestone.number : null;
              console.log(`Parent milestone number: ${milestoneNumber}`);
              return { milestone: milestoneNumber };
            } catch (error) {
              console.error(`Error fetching parent issue info for #${parentIssueNumber}: ${error.message}`);
              // 부모 이슈를 찾을 수 없거나 접근 권한이 없는 경우를 대비
              if (error.status === 404) {
                console.log(`Parent issue #${parentIssueNumber} not found.`);
              }
              return { milestone: null }; // 에러 발생 시 마일스톤 null 반환
            }
          result-encoding: json

      - name: Copy milestone to sub-issue
        if: steps.parent_info.outputs.milestone != 'null' && steps.parent_info.outputs.milestone != ''
        uses: actions/github-script@v7
        with:
          script: |
            const milestoneToApply = parseInt(`${{ steps.parent_info.outputs.milestone }}`, 10);
            console.log(`Attempting to set milestone: ${milestoneToApply} for issue #${context.issue.number}`);

            if (isNaN(milestoneToApply)) {
              console.log("Milestone to apply is not a valid number. Skipping milestone update.");
              return;
            }

            try {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                milestone: milestoneToApply
              });
              console.log(`Milestone ${milestoneToApply} successfully copied to issue #${context.issue.number}`);
            } catch (error) {
              console.error(`Error copying milestone to sub-issue #${context.issue.number}: ${error.message}`);
            }
